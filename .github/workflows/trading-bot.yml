name: Trading Bot

on:
  schedule:
    # Run every 3 hours
    - cron: '0 */3 * * *'
  
  workflow_dispatch:
    inputs:
      mode:
        description: 'Trading mode'
        required: false
        default: 'simulation'
        type: choice
        options:
          - simulation
          - paper
          - live

  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'requirements.txt'

jobs:
  trade:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install additional packages for CI
          pip install python-dotenv loguru
      
      - name: Initialize Environment
        env:
          GITHUB_ACTIONS: true
          TRADING_MODE: ${{ github.event.inputs.mode || 'paper' }}
        run: |
          echo "Running in $TRADING_MODE mode"
          # Create necessary directories
          mkdir -p logs
          mkdir -p whatsapp_data
          mkdir -p monitoring_data
          # Create initial log files
          echo "Trading Bot Log - $(date)" > logs/trading_bot_$(date +%Y%m%d).log
          echo "System initialized at $(date)" >> logs/trading_bot_$(date +%Y%m%d).log
      
      - name: Initialize Database
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PYTHONPATH: .
        run: |
          echo "Skipping database initialization for now..."
          # python scripts/init_database.py
      
      - name: Run Trading Bot
        env:
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CLAUDE_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          GITHUB_ACTIONS: true
          TRADING_MODE: ${{ github.event.inputs.mode || 'paper' }}
          PYTHONPATH: .
        run: |
          echo "Current directory: $(pwd)"
          echo "Testing Claude API key:"
          python -c "import os; print('ANTHROPIC_API_KEY set:', bool(os.getenv('ANTHROPIC_API_KEY')))"
          python -c "import os; print('CLAUDE_API_KEY set:', bool(os.getenv('CLAUDE_API_KEY')))"
          echo ""
          
          # Test paper trading if in paper mode
          if [ "$TRADING_MODE" = "paper" ]; then
            echo "========================================="
            echo "TESTING PAPER TRADING CONNECTION"
            echo "========================================="
            python test_paper_trading.py | tee -a logs/paper_test_$(date +%Y%m%d_%H%M%S).log
          fi
          
          echo ""
          
          # Check if we have signal files to process
          if ls signals/*.json 1> /dev/null 2>&1; then
            echo "========================================="
            echo "PROCESSING TRADING SIGNALS"
            echo "========================================="
            echo "Found signal files:"
            ls -la signals/*.json
            # Run the full bot to process signals
            python run_trading_bot.py | tee -a logs/trading_$(date +%Y%m%d_%H%M%S).log
          else
            echo "========================================="
            echo "EXECUTING ONE TRADE FOR TRANSACTION PROOF"
            echo "========================================="
            # Run the test script to execute one trade and capture output
            python test_one_trade.py | tee -a logs/transaction_$(date +%Y%m%d_%H%M%S).log
          fi
          
          # Save transaction summary
          echo "Transaction completed at $(date)" >> logs/trading_summary.log
          echo "Latest run details saved to logs/" >> logs/trading_summary.log
          
          # List log files for verification
          echo ""
          echo "üìÅ Log files created:"
          ls -la logs/
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trading-logs-${{ github.run_id }}
          path: |
            logs/
            monitoring_data/
          retention-days: 7
      
      - name: Performance Report
        if: always()
        run: |
          echo "üìä Trading Bot Run Complete"
          echo "Mode: ${{ github.event.inputs.mode || 'simulation' }}"
          echo "Time: $(date)"
          
          # Check for any errors in logs
          if [ -f logs/*.log ]; then
            echo "Checking for errors..."
            grep -i error logs/*.log | tail -5 || echo "No errors found"
          fi