name: Process Trading Signal PRs

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'whatsapp_data/signals_*.json'
  
  # Also allow manual trigger
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process'
        required: false

jobs:
  validate-and-trade:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'whatsapp-signals') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Validate Signal JSON
        id: validate
        run: |
          # Find the signals file
          SIGNAL_FILE=$(ls -t whatsapp_data/signals_*.json | head -1)
          
          if [ -z "$SIGNAL_FILE" ]; then
            echo "❌ No signals file found"
            exit 1
          fi
          
          echo "📊 Validating: $SIGNAL_FILE"
          
          # Validate JSON structure
          python -c "
          import json
          import sys
          
          with open('$SIGNAL_FILE', 'r') as f:
              data = json.load(f)
          
          # Check required fields
          assert 'metadata' in data, 'Missing metadata'
          assert 'signals' in data, 'Missing signals'
          assert len(data['signals']) > 0, 'No signals found'
          
          # Count high confidence signals
          high_conf = [s for s in data['signals'] if s.get('confidence', 0) >= 0.7]
          print(f'✅ Valid JSON with {len(high_conf)} high-confidence signals')
          
          # Output for next steps
          print(f'::set-output name=signal_file::{SIGNAL_FILE}')
          print(f'::set-output name=high_conf_count::{len(high_conf)}')
          "
      
      - name: Analyze Signals with Claude
        id: analyze
        if: steps.validate.outputs.high_conf_count > 0
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python -c "
          import json
          import os
          from pathlib import Path
          
          # Read signals
          with open('${{ steps.validate.outputs.signal_file }}', 'r') as f:
              signals = json.load(f)
          
          print('🤖 Claude AI Analysis:')
          print(f'   Analyzing {len(signals[\"signals\"])} signals')
          
          # Here Claude would evaluate each signal
          # For now, we'll auto-approve high confidence ones
          approved = []
          for signal in signals['signals']:
              if signal.get('confidence', 0) >= 0.75:
                  approved.append(signal)
                  print(f'   ✅ Approved: {signal[\"ticker\"]} {signal[\"action\"]}')
          
          print(f'   Total approved: {len(approved)}')
          
          # Save approved trades
          with open('approved_trades.json', 'w') as f:
              json.dump(approved, f)
          "
      
      - name: Execute Trades (Simulation)
        if: steps.validate.outputs.high_conf_count > 0
        env:
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
          TRADING_MODE: simulation
        run: |
          python -c "
          import json
          from datetime import datetime
          
          # Read approved trades
          try:
              with open('approved_trades.json', 'r') as f:
                  trades = json.load(f)
          except:
              trades = []
          
          print('📈 Executing Trades (Simulation Mode):')
          
          results = []
          for trade in trades:
              # Simulate execution
              result = {
                  'ticker': trade['ticker'],
                  'action': trade['action'],
                  'status': 'SIMULATED',
                  'timestamp': datetime.now().isoformat(),
                  'confidence': trade['confidence']
              }
              results.append(result)
              print(f'   ✅ {trade[\"ticker\"]} {trade[\"action\"]} - SIMULATED')
          
          # Save results
          with open('execution_results.json', 'w') as f:
              json.dump(results, f, indent=2)
          "
      
      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read results
            let executionResults = [];
            let validationStatus = '${{ steps.validate.outcome }}';
            let highConfCount = '${{ steps.validate.outputs.high_conf_count }}' || '0';
            
            try {
              const results = fs.readFileSync('execution_results.json', 'utf8');
              executionResults = JSON.parse(results);
            } catch (e) {
              console.log('No execution results found');
            }
            
            // Build comment
            let comment = `## 🤖 Trading Bot Analysis\n\n`;
            
            if (validationStatus === 'success') {
              comment += `✅ **Signal Validation**: Passed\n`;
              comment += `📊 **High Confidence Signals**: ${highConfCount}\n\n`;
              
              if (executionResults.length > 0) {
                comment += `### 📈 Execution Results\n\n`;
                comment += `| Ticker | Action | Status | Confidence |\n`;
                comment += `|--------|--------|--------|------------|\n`;
                
                for (const trade of executionResults) {
                  comment += `| ${trade.ticker} | ${trade.action} | ${trade.status} | ${(trade.confidence * 100).toFixed(0)}% |\n`;
                }
                
                comment += `\n✅ All trades executed in simulation mode\n`;
              } else {
                comment += `⚠️ No trades met the execution threshold\n`;
              }
            } else {
              comment += `❌ **Signal Validation**: Failed\n`;
              comment += `Please check the JSON format and ensure signals are properly formatted\n`;
            }
            
            comment += `\n---\n`;
            comment += `*Automated by GitHub Actions Trading Bot*`;
            
            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
      
      - name: Auto-merge if successful
        if: steps.validate.outcome == 'success' && steps.validate.outputs.high_conf_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            // Add approval
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '✅ Auto-approved: Signals validated and trades executed'
            });
            
            // Merge PR
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash',
                commit_title: `signals: Auto-merged WhatsApp signals ${new Date().toISOString()}`
              });
              console.log('✅ PR auto-merged successfully');
            } catch (e) {
              console.log('Could not auto-merge:', e.message);
            }